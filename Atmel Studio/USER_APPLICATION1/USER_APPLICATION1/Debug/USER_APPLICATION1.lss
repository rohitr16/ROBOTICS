
USER_APPLICATION1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000138  00000000  00000000  00000a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008eb  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000347  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b09  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026e  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000532  00000000  00000000  000026fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00011516  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00014142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	cd d0       	rcall	.+410    	; 0x222 <main>
  88:	ff c0       	rjmp	.+510    	; 0x288 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  8c:	da 9a       	sbi	0x1b, 2	; 27
    lcd_e_delay();
  8e:	00 c0       	rjmp	.+0      	; 0x90 <toggle_e+0x4>
    lcd_e_low();
  90:	da 98       	cbi	0x1b, 2	; 27
}
  92:	08 95       	ret

00000094 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  94:	cf 93       	push	r28
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	11 f0       	breq	.+4      	; 0x9e <lcd_write+0xa>
       lcd_rs_high();
  9a:	d8 9a       	sbi	0x1b, 0	; 27
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9e:	d8 98       	cbi	0x1b, 0	; 27
    }
    lcd_rw_low();
  a0:	d9 98       	cbi	0x1b, 1	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  a2:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  a4:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  a6:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  a8:	d7 9a       	sbi	0x1a, 7	; 26
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  aa:	df 98       	cbi	0x1b, 7	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  ac:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ae:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  b0:	dc 98       	cbi	0x1b, 4	; 27
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  b2:	88 23       	and	r24, r24
  b4:	0c f4       	brge	.+2      	; 0xb8 <lcd_write+0x24>
  b6:	df 9a       	sbi	0x1b, 7	; 27
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  b8:	c8 2f       	mov	r28, r24
  ba:	86 fd       	sbrc	r24, 6
  bc:	de 9a       	sbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  be:	c5 fd       	sbrc	r28, 5
  c0:	dd 9a       	sbi	0x1b, 5	; 27
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  c2:	c4 fd       	sbrc	r28, 4
  c4:	dc 9a       	sbi	0x1b, 4	; 27
        lcd_e_toggle();
  c6:	e2 df       	rcall	.-60     	; 0x8c <toggle_e>
  c8:	df 98       	cbi	0x1b, 7	; 27
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  ca:	de 98       	cbi	0x1b, 6	; 27
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  cc:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  ce:	dc 98       	cbi	0x1b, 4	; 27
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  d0:	c3 fd       	sbrc	r28, 3
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d2:	df 9a       	sbi	0x1b, 7	; 27
  d4:	c2 fd       	sbrc	r28, 2
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d6:	de 9a       	sbi	0x1b, 6	; 27
  d8:	c1 fd       	sbrc	r28, 1
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  da:	dd 9a       	sbi	0x1b, 5	; 27
  dc:	c0 fd       	sbrc	r28, 0
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  de:	dc 9a       	sbi	0x1b, 4	; 27
  e0:	d5 df       	rcall	.-86     	; 0x8c <toggle_e>
        lcd_e_toggle();        
  e2:	dc 9a       	sbi	0x1b, 4	; 27
  e4:	dd 9a       	sbi	0x1b, 5	; 27
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  e6:	de 9a       	sbi	0x1b, 6	; 27
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  e8:	df 9a       	sbi	0x1b, 7	; 27
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ea:	cf 91       	pop	r28
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  ec:	08 95       	ret

000000ee <lcd_read>:
    }
}
  ee:	88 23       	and	r24, r24
  f0:	11 f0       	breq	.+4      	; 0xf6 <lcd_read+0x8>
{
    uint8_t data;
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
  f2:	d8 9a       	sbi	0x1b, 0	; 27
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  f6:	d8 98       	cbi	0x1b, 0	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
  f8:	d9 9a       	sbi	0x1b, 1	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  fa:	d4 98       	cbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  fc:	d5 98       	cbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  fe:	d6 98       	cbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 100:	d7 98       	cbi	0x1a, 7	; 26
                
        /* read high nibble first */
        lcd_e_high();
 102:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();        
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 106:	cc 99       	sbic	0x19, 4	; 25
 108:	02 c0       	rjmp	.+4      	; 0x10e <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 10e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 110:	cd 99       	sbic	0x19, 5	; 25
 112:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 114:	ce 99       	sbic	0x19, 6	; 25
 116:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 118:	cf 99       	sbic	0x19, 7	; 25
 11a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 11c:	da 98       	cbi	0x1b, 2	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 120:	da 9a       	sbi	0x1b, 2	; 27
        lcd_e_delay();
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 124:	cc 99       	sbic	0x19, 4	; 25
 126:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 128:	cd 99       	sbic	0x19, 5	; 25
 12a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 12c:	ce 99       	sbic	0x19, 6	; 25
 12e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 130:	cf 99       	sbic	0x19, 7	; 25
 132:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 134:	da 98       	cbi	0x1b, 2	; 27
    }
    return data;
}
 136:	08 95       	ret

00000138 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	d9 df       	rcall	.-78     	; 0xee <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	e4 f3       	brlt	.-8      	; 0x138 <lcd_waitbusy>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_waitbusy+0xa>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 142:	80 e0       	ldi	r24, 0x00	; 0
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 144:	d4 cf       	rjmp	.-88     	; 0xee <lcd_read>

00000146 <lcd_command>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
    
}/* lcd_waitbusy */
 14a:	f6 df       	rcall	.-20     	; 0x138 <lcd_waitbusy>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
 14c:	8c 2f       	mov	r24, r28
    lcd_write(cmd,0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	a1 df       	rcall	.-190    	; 0x94 <lcd_write>
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcd_gotoxy>:
}
 156:	66 23       	and	r22, r22
 158:	11 f4       	brne	.+4      	; 0x15e <lcd_gotoxy+0x8>
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 15a:	80 58       	subi	r24, 0x80	; 128
 15c:	f4 cf       	rjmp	.-24     	; 0x146 <lcd_command>
 15e:	80 54       	subi	r24, 0x40	; 64
 160:	f2 cf       	rjmp	.-28     	; 0x146 <lcd_command>

00000162 <lcd_clrscr>:
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	f0 cf       	rjmp	.-32     	; 0x146 <lcd_command>

00000166 <lcd_putc>:
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
void lcd_putc(char c)
{
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 16a:	e6 df       	rcall	.-52     	; 0x138 <lcd_waitbusy>
 16c:	ca 30       	cpi	r28, 0x0A	; 10
    if (c=='\n')
 16e:	41 f4       	brne	.+16     	; 0x180 <lcd_putc+0x1a>
 170:	80 34       	cpi	r24, 0x40	; 64

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 172:	10 f4       	brcc	.+4      	; 0x178 <lcd_putc+0x12>
 174:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE2;
 176:	01 c0       	rjmp	.+2      	; 0x17a <lcd_putc+0x14>
 178:	80 e0       	ldi	r24, 0x00	; 0
    else
        addressCounter = LCD_START_LINE1;
 17a:	80 58       	subi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 17c:	e4 df       	rcall	.-56     	; 0x146 <lcd_command>
 17e:	03 c0       	rjmp	.+6      	; 0x186 <lcd_putc+0x20>
 180:	8c 2f       	mov	r24, r28
 182:	61 e0       	ldi	r22, 0x01	; 1
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 184:	87 df       	rcall	.-242    	; 0x94 <lcd_write>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_init>:
 18a:	1f 93       	push	r17
    }

}/* lcd_putc */
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 190:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 192:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 194:	d1 9a       	sbi	0x1a, 1	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 196:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 198:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 19a:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 19c:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 19e:	d7 9a       	sbi	0x1a, 7	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a0:	80 ea       	ldi	r24, 0xA0	; 160
 1a2:	9f e0       	ldi	r25, 0x0F	; 15
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1a8:	dd 9a       	sbi	0x1b, 5	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1aa:	dc 9a       	sbi	0x1b, 4	; 27
    lcd_e_toggle();
 1ac:	6f df       	rcall	.-290    	; 0x8c <toggle_e>
 1ae:	80 ee       	ldi	r24, 0xE0	; 224
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x28>
 1b6:	6a df       	rcall	.-300    	; 0x8c <toggle_e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1b8:	c0 e1       	ldi	r28, 0x10	; 16
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1bc:	ce 01       	movw	r24, r28
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x34>
 1c2:	64 df       	rcall	.-312    	; 0x8c <toggle_e>
 1c4:	ce 01       	movw	r24, r28
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x3c>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ca:	dc 98       	cbi	0x1b, 4	; 27
 1cc:	5f df       	rcall	.-322    	; 0x8c <toggle_e>
 1ce:	21 97       	sbiw	r28, 0x01	; 1
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x44>
    lcd_e_toggle();
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	b8 df       	rcall	.-144    	; 0x146 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	b6 df       	rcall	.-148    	; 0x146 <lcd_command>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1da:	c3 df       	rcall	.-122    	; 0x162 <lcd_clrscr>
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	b3 df       	rcall	.-154    	; 0x146 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e0:	81 2f       	mov	r24, r17
 1e2:	b1 df       	rcall	.-158    	; 0x146 <lcd_command>
 1e4:	df 91       	pop	r29
    lcd_clrscr();                           /* display clear                */ 
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ea:	08 95       	ret

000001ec <USARTInit>:
 1ec:	89 b9       	out	0x09, r24	; 9
 1ee:	10 bc       	out	0x20, r1	; 32
    lcd_command(dispAttr);                  /* display/cursor control       */
 1f0:	86 e8       	ldi	r24, 0x86	; 134
 1f2:	80 bd       	out	0x20, r24	; 32
 1f4:	88 e1       	ldi	r24, 0x18	; 24

}/* lcd_init */
 1f6:	8a b9       	out	0x0a, r24	; 10
 1f8:	08 95       	ret

000001fa <USARTRead>:
 1fa:	5f 9b       	sbis	0x0b, 7	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <USARTRead>
}

 unsigned USARTRead()
{
	while(!(UCSRA & (1<<RXC)));
	return UDR;
 1fe:	8c b1       	in	r24, 0x0c	; 12
}
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	08 95       	ret

00000204 <EEPROMRead>:
	 UDR = data;
 }

 uint8_t EEPROMRead(uint16_t address)
 {
	 while(EECR & (1<<EEWE));
 204:	e1 99       	sbic	0x1c, 1	; 28
 206:	fe cf       	rjmp	.-4      	; 0x204 <EEPROMRead>
	 EEAR=address;
 208:	9f bb       	out	0x1f, r25	; 31
 20a:	8e bb       	out	0x1e, r24	; 30
	 EECR|= (1<<EERE);
 20c:	e0 9a       	sbi	0x1c, 0	; 28
	 return EEDR;
 20e:	8d b3       	in	r24, 0x1d	; 29
 }
 210:	08 95       	ret

00000212 <EEPROMWrite>:
 void EEPROMWrite(uint16_t address,uint8_t data)
 {
	 while(EECR & (1<<EEWE));
 212:	e1 99       	sbic	0x1c, 1	; 28
 214:	fe cf       	rjmp	.-4      	; 0x212 <EEPROMWrite>
	 EEAR=address;
 216:	9f bb       	out	0x1f, r25	; 31
 218:	8e bb       	out	0x1e, r24	; 30
	 EEDR=data;
 21a:	6d bb       	out	0x1d, r22	; 29
	 EECR|= (1<<EEMWE);
 21c:	e2 9a       	sbi	0x1c, 2	; 28
	 EECR|= (1<<EEWE);
 21e:	e1 9a       	sbi	0x1c, 1	; 28
 }
 220:	08 95       	ret

00000222 <main>:
 
 
 main (void)
{
	DDRA=0xFF;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 226:	87 bb       	out	0x17, r24	; 23
	unsigned char data;
	unsigned int addr=1,eep=0;
	
	
	USARTInit(51);
 228:	83 e3       	ldi	r24, 0x33	; 51
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	df df       	rcall	.-66     	; 0x1ec <USARTInit>
 22e:	8c e0       	ldi	r24, 0x0C	; 12
	lcd_init(LCD_DISP_ON);
 230:	ac df       	rcall	.-168    	; 0x18a <lcd_init>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
	

	if(EEPROMRead(0)!=255)
 236:	e6 df       	rcall	.-52     	; 0x204 <EEPROMRead>
 238:	8f 3f       	cpi	r24, 0xFF	; 255
 23a:	69 f0       	breq	.+26     	; 0x256 <main+0x34>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	e1 df       	rcall	.-62     	; 0x204 <EEPROMRead>
	{
	  lcd_putc(EEPROMRead(0));
 242:	91 df       	rcall	.-222    	; 0x166 <lcd_putc>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	dd df       	rcall	.-70     	; 0x204 <EEPROMRead>
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	d9 f7       	brne	.-10     	; 0x244 <main+0x22>
	  while(EEPROMRead(addr)!=255);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	d8 df       	rcall	.-80     	; 0x204 <EEPROMRead>
 254:	88 df       	rcall	.-240    	; 0x166 <lcd_putc>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	60 e0       	ldi	r22, 0x00	; 0
	  lcd_putc(EEPROMRead(addr++));	
 25a:	7d df       	rcall	.-262    	; 0x156 <lcd_gotoxy>
 25c:	ee 24       	eor	r14, r14
 25e:	ff 24       	eor	r15, r15
 260:	cc df       	rcall	.-104    	; 0x1fa <USARTRead>
 262:	18 2f       	mov	r17, r24
 264:	e7 01       	movw	r28, r14
	}
	
	lcd_gotoxy(0,0);
 266:	21 96       	adiw	r28, 0x01	; 1
 268:	c7 01       	movw	r24, r14
 26a:	61 2f       	mov	r22, r17
 26c:	d2 df       	rcall	.-92     	; 0x212 <EEPROMWrite>
 main (void)
{
	DDRA=0xFF;
	DDRB=0xFF;
	unsigned char data;
	unsigned int addr=1,eep=0;
 26e:	81 2f       	mov	r24, r17
 270:	7a df       	rcall	.-268    	; 0x166 <lcd_putc>
	
	lcd_gotoxy(0,0);
	
	while(1)
	{
		data = USARTRead();
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9d e0       	ldi	r25, 0x0D	; 13
 276:	a3 e0       	ldi	r26, 0x03	; 3
		EEPROMWrite(eep++,data);
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	a0 40       	sbci	r26, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x56>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x60>
 282:	00 00       	nop
		lcd_putc(data);
 284:	7e 01       	movw	r14, r28
 286:	ec cf       	rjmp	.-40     	; 0x260 <main+0x3e>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
