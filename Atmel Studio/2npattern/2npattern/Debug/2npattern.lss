
2npattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000049f  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016c  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087a  00000000  00000000  00000fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a2  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000fab7  00000000  00000000  00001b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0001160d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	60 c0       	rjmp	.+192    	; 0x14a <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <util/delay.h>

 main (void)
{

    DDRA = 0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a bb       	out	0x1a, r24	; 26
	int i,n=1,g=0;
  90:	ee 24       	eor	r14, r14
  92:	ff 24       	eor	r15, r15
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		if(n==1 && g==0)
  98:	c7 e0       	ldi	r28, 0x07	; 7
  9a:	d0 e0       	ldi	r29, 0x00	; 0
             PORTA=n; 
			 n=n*2;			
			 _delay_ms(500);
			 if(n==128)
			 {
				 g=1;
  9c:	cc 24       	eor	r12, r12
  9e:	dd 24       	eor	r13, r13
  a0:	c3 94       	inc	r12
			
		 }
		 if(n==128 && g==1)
		 for(i=1;i<=7;i++)
		 {
			 PORTA=n;
  a2:	10 e8       	ldi	r17, 0x80	; 128
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x1e>
			 {
				 g=1;
			 }
			
		 }
		 if(n==128 && g==1)
  a6:	eb 2e       	mov	r14, r27
  a8:	fa 2e       	mov	r15, r26

    DDRA = 0xFF;
	int i,n=1,g=0;
	while(1)
	{
		if(n==1 && g==0)
  aa:	21 30       	cpi	r18, 0x01	; 1
  ac:	31 05       	cpc	r19, r1
  ae:	09 f0       	breq	.+2      	; 0xb2 <main+0x26>
  b0:	4b c0       	rjmp	.+150    	; 0x148 <main+0xbc>
  b2:	e1 14       	cp	r14, r1
  b4:	f1 04       	cpc	r15, r1
  b6:	e9 f7       	brne	.-6      	; 0xb2 <main+0x26>
  b8:	be 2d       	mov	r27, r14
  ba:	af 2d       	mov	r26, r15
  bc:	ce 01       	movw	r24, r28
		{
			for(i=1;i<=7;i++)
		 {
             PORTA=n; 
  be:	2b bb       	out	0x1b, r18	; 27
			 n=n*2;			
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	4f e9       	ldi	r20, 0x9F	; 159
  c6:	56 e8       	ldi	r21, 0x86	; 134
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	41 50       	subi	r20, 0x01	; 1
  cc:	50 40       	sbci	r21, 0x00	; 0
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x3e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x48>
  d4:	00 00       	nop
			 _delay_ms(500);
			 if(n==128)
  d6:	20 38       	cpi	r18, 0x80	; 128
  d8:	31 05       	cpc	r19, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x54>
			 {
				 g=1;
  dc:	bc 2d       	mov	r27, r12
  de:	ad 2d       	mov	r26, r13
			for(i=1;i<=7;i++)
		 {
             PORTA=n; 
			 n=n*2;			
			 _delay_ms(500);
			 if(n==128)
  e0:	01 97       	sbiw	r24, 0x01	; 1
	int i,n=1,g=0;
	while(1)
	{
		if(n==1 && g==0)
		{
			for(i=1;i<=7;i++)
  e2:	69 f7       	brne	.-38     	; 0xbe <main+0x32>
  e4:	8b 2f       	mov	r24, r27
  e6:	9a 2f       	mov	r25, r26
			 {
				 g=1;
			 }
			
		 }
		 if(n==128 && g==1)
  e8:	20 38       	cpi	r18, 0x80	; 128
  ea:	31 05       	cpc	r19, r1
  ec:	e1 f6       	brne	.-72     	; 0xa6 <main+0x1a>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	c9 f6       	brne	.-78     	; 0xa6 <main+0x1a>
  f4:	19 c0       	rjmp	.+50     	; 0x128 <main+0x9c>
		 for(i=1;i<=7;i++)
		 {
			 PORTA=n;
  f6:	2b bb       	out	0x1b, r18	; 27
			 n=n/2;
  f8:	c9 01       	movw	r24, r18
  fa:	99 23       	and	r25, r25
  fc:	0c f4       	brge	.+2      	; 0x100 <main+0x74>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	9c 01       	movw	r18, r24
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	6f e9       	ldi	r22, 0x9F	; 159
 108:	76 e8       	ldi	r23, 0x86	; 134
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	61 50       	subi	r22, 0x01	; 1
 10e:	70 40       	sbci	r23, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x80>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x8a>
 116:	00 00       	nop
			 _delay_ms(500);
			 if(n==1)
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x96>
			 {
				 g=0;
 11e:	b0 2f       	mov	r27, r16
 120:	a4 2f       	mov	r26, r20
		 for(i=1;i<=7;i++)
		 {
			 PORTA=n;
			 n=n/2;
			 _delay_ms(500);
			 if(n==1)
 122:	31 97       	sbiw	r30, 0x01	; 1
				 g=1;
			 }
			
		 }
		 if(n==128 && g==1)
		 for(i=1;i<=7;i++)
 124:	41 f7       	brne	.-48     	; 0xf6 <main+0x6a>
 126:	bf cf       	rjmp	.-130    	; 0xa6 <main+0x1a>
		 {
			 PORTA=n;
 128:	1b bb       	out	0x1b, r17	; 27
 12a:	2f e9       	ldi	r18, 0x9F	; 159
 12c:	36 e8       	ldi	r19, 0x86	; 134
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	40 40       	sbci	r20, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xa4>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xae>
 13a:	00 00       	nop
 13c:	fe 01       	movw	r30, r28
			 n=n/2;
 13e:	20 e4       	ldi	r18, 0x40	; 64
 140:	30 e0       	ldi	r19, 0x00	; 0
			 _delay_ms(500);
			 if(n==1)
			 {
				 g=0;
 142:	0e 2d       	mov	r16, r14
 144:	4f 2d       	mov	r20, r15
 146:	ed cf       	rjmp	.-38     	; 0x122 <main+0x96>
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0xbc>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
