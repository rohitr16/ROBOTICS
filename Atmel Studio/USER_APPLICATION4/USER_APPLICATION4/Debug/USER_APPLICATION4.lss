
USER_APPLICATION4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ac  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016c  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000899  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013c  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c6  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000fab7  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0001166d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	02 d0       	rcall	.+4      	; 0x8c <main>
  88:	61 c0       	rjmp	.+194    	; 0x14c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <main>:
#include <avr/io.h>
#include <util/delay.h>

 main (void)
{
	DDRA=0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a bb       	out	0x1a, r24	; 26
	int i,n=1,g=0,m;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
	    if(n==1 && g==0)
  98:	e8 e0       	ldi	r30, 0x08	; 8
  9a:	f0 e0       	ldi	r31, 0x00	; 0
		{ 
			n=n*2;
			m=n-1;
			PORTA=m;
			_delay_ms(500);
			g=1;
  9c:	aa 24       	eor	r10, r10
  9e:	bb 24       	eor	r11, r11
  a0:	a3 94       	inc	r10
		if(n==256 && g==1)
		{
		for(i=1;i<=9;i++)
		{
			m=n-1;
			PORTA=m;
  a2:	cf ef       	ldi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	09 e0       	ldi	r16, 0x09	; 9
  a6:	10 e0       	ldi	r17, 0x00	; 0
			n=n/2;
  a8:	ee 24       	eor	r14, r14
  aa:	ff 24       	eor	r15, r15
  ac:	68 94       	set
  ae:	e7 f8       	bld	r14, 7
			_delay_ms(500);
			g=0;
			if(n==0)
			{
				n=1;
  b0:	6a 2d       	mov	r22, r10
  b2:	7b 2d       	mov	r23, r11
		{
			m=n-1;
			PORTA=m;
			n=n/2;
			_delay_ms(500);
			g=0;
  b4:	cc 24       	eor	r12, r12
  b6:	dd 24       	eor	r13, r13
{
	DDRA=0xFF;
	int i,n=1,g=0,m;
	while(1)
	{
	    if(n==1 && g==0)
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	31 05       	cpc	r19, r1
  bc:	a9 f4       	brne	.+42     	; 0xe8 <main+0x5c>
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	d9 f7       	brne	.-10     	; 0xb8 <main+0x2c>
  c2:	af 01       	movw	r20, r30
		{
			for(i=1;i<=8;i++)
		{ 
			n=n*2;
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
			m=n-1;
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
			PORTA=m;
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	96 e8       	ldi	r25, 0x86	; 134
  d2:	a1 e0       	ldi	r26, 0x01	; 1
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	a0 40       	sbci	r26, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x48>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x52>
  de:	00 00       	nop
  e0:	41 50       	subi	r20, 0x01	; 1
  e2:	50 40       	sbci	r21, 0x00	; 0
	int i,n=1,g=0,m;
	while(1)
	{
	    if(n==1 && g==0)
		{
			for(i=1;i<=8;i++)
  e4:	79 f7       	brne	.-34     	; 0xc4 <main+0x38>
		{ 
			n=n*2;
			m=n-1;
			PORTA=m;
			_delay_ms(500);
			g=1;
  e6:	c5 01       	movw	r24, r10
		}
	  }		
		if(n==256 && g==1)
  e8:	a1 e0       	ldi	r26, 0x01	; 1
  ea:	20 30       	cpi	r18, 0x00	; 0
  ec:	3a 07       	cpc	r19, r26
  ee:	21 f7       	brne	.-56     	; 0xb8 <main+0x2c>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	09 f7       	brne	.-62     	; 0xb8 <main+0x2c>
  f6:	1d c0       	rjmp	.+58     	; 0x132 <main+0xa6>
		{
		for(i=1;i<=9;i++)
		{
			m=n-1;
  f8:	c9 01       	movw	r24, r18
  fa:	01 97       	sbiw	r24, 0x01	; 1
			PORTA=m;
  fc:	8b bb       	out	0x1b, r24	; 27
			n=n/2;
  fe:	c9 01       	movw	r24, r18
 100:	99 23       	and	r25, r25
 102:	0c f4       	brge	.+2      	; 0x106 <main+0x7a>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	9c 01       	movw	r18, r24
 108:	35 95       	asr	r19
 10a:	27 95       	ror	r18
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	96 e8       	ldi	r25, 0x86	; 134
 110:	a1 e0       	ldi	r26, 0x01	; 1
 112:	81 50       	subi	r24, 0x01	; 1
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	a0 40       	sbci	r26, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x86>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x90>
 11c:	00 00       	nop
			_delay_ms(500);
			g=0;
			if(n==0)
 11e:	21 15       	cp	r18, r1
 120:	31 05       	cpc	r19, r1
 122:	11 f4       	brne	.+4      	; 0x128 <main+0x9c>
			{
				n=1;
 124:	26 2f       	mov	r18, r22
 126:	37 2f       	mov	r19, r23
			m=n-1;
			PORTA=m;
			n=n/2;
			_delay_ms(500);
			g=0;
			if(n==0)
 128:	41 50       	subi	r20, 0x01	; 1
 12a:	50 40       	sbci	r21, 0x00	; 0
			g=1;
		}
	  }		
		if(n==256 && g==1)
		{
		for(i=1;i<=9;i++)
 12c:	29 f7       	brne	.-54     	; 0xf8 <main+0x6c>
		{
			m=n-1;
			PORTA=m;
			n=n/2;
			_delay_ms(500);
			g=0;
 12e:	c6 01       	movw	r24, r12
 130:	c3 cf       	rjmp	.-122    	; 0xb8 <main+0x2c>
		if(n==256 && g==1)
		{
		for(i=1;i<=9;i++)
		{
			m=n-1;
			PORTA=m;
 132:	cb bb       	out	0x1b, r28	; 27
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	96 e8       	ldi	r25, 0x86	; 134
 138:	a1 e0       	ldi	r26, 0x01	; 1
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xae>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xb8>
 144:	00 00       	nop
 146:	a8 01       	movw	r20, r16
			n=n/2;
 148:	97 01       	movw	r18, r14
 14a:	ee cf       	rjmp	.-36     	; 0x128 <main+0x9c>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
