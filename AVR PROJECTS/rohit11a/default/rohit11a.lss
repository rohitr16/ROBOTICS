
rohit11a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009f  00000000  00000000  00000135  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005b  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c4  00000000  00000000  0000022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008b  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	23 c0       	rjmp	.+70     	; 0xa2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include<avr/io.h>
main()
{
int x,f=1,g=1;
DDRB=0b00011110;
  5e:	8e e1       	ldi	r24, 0x1E	; 30
  60:	87 bb       	out	0x17, r24	; 23
  62:	21 e0       	ldi	r18, 0x01	; 1
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	90 e0       	ldi	r25, 0x00	; 0
if(x==0b00000001 && f==1)
{
g=0;
while((PINB&0b00000001)!=0b00000000)
{
PORTB=0b00000010;
  6a:	62 e0       	ldi	r22, 0x02	; 2
}
PORTB=0b00010010;
  6c:	42 e1       	ldi	r20, 0x12	; 18
if(x==0b00000000 && g==1)
{
f=0;
while((PINB&0b00000001)!=0b00000001)
{
PORTB=0b00010000;
  6e:	50 e1       	ldi	r21, 0x10	; 16
  70:	02 c0       	rjmp	.+4      	; 0x76 <main+0x18>
#include<avr/io.h>
main()
{
int x,f=1,g=1;
DDRB=0b00011110;
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
while(1)
{
x=PINB&0b00000001;
if(x==0b00000001 && f==1)
  76:	b0 9b       	sbis	0x16, 0	; 22
  78:	09 c0       	rjmp	.+18     	; 0x8c <main+0x2e>
  7a:	21 30       	cpi	r18, 0x01	; 1
  7c:	31 05       	cpc	r19, r1
  7e:	d9 f7       	brne	.-10     	; 0x76 <main+0x18>
  80:	01 c0       	rjmp	.+2      	; 0x84 <main+0x26>
{
g=0;
while((PINB&0b00000001)!=0b00000000)
{
PORTB=0b00000010;
  82:	68 bb       	out	0x18, r22	; 24
{
x=PINB&0b00000001;
if(x==0b00000001 && f==1)
{
g=0;
while((PINB&0b00000001)!=0b00000000)
  84:	b0 99       	sbic	0x16, 0	; 22
  86:	fd cf       	rjmp	.-6      	; 0x82 <main+0x24>
{
PORTB=0b00000010;
}
PORTB=0b00010010;
  88:	48 bb       	out	0x18, r20	; 24
  8a:	f3 cf       	rjmp	.-26     	; 0x72 <main+0x14>
}
if(x==0b00000000 && g==1)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 05       	cpc	r25, r1
  90:	81 f7       	brne	.-32     	; 0x72 <main+0x14>
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x38>
{
f=0;
while((PINB&0b00000001)!=0b00000001)
{
PORTB=0b00010000;
  94:	58 bb       	out	0x18, r21	; 24
PORTB=0b00010010;
}
if(x==0b00000000 && g==1)
{
f=0;
while((PINB&0b00000001)!=0b00000001)
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fd cf       	rjmp	.-6      	; 0x94 <main+0x36>
{
PORTB=0b00010000;
}
PORTB=0b00010010;
  9a:	48 bb       	out	0x18, r20	; 24
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	ea cf       	rjmp	.-44     	; 0x76 <main+0x18>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
