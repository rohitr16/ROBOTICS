
rohit7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000083  00000000  00000000  0000013b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e8  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000087  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ea       	ldi	r30, 0xAC	; 172
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	26 c0       	rjmp	.+76     	; 0xa8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include<avr/io.h>
main()
{
int x;
DDRB=0b00011110;
  5e:	8e e1       	ldi	r24, 0x1E	; 30
  60:	87 bb       	out	0x17, r24	; 23
DDRC=0b11110000;
  62:	80 ef       	ldi	r24, 0xF0	; 240
  64:	84 bb       	out	0x14, r24	; 20
while(1)
{
x=PINC&0b00001111;
if(x==0b00001010)
PORTB=0b00011000;
  66:	68 e1       	ldi	r22, 0x18	; 24
if(x==0b00000010)
PORTB=0b00010010;
if(x==0b00000100)
PORTB=0b00010000;
if(x==0b00000110)
PORTB=0b00011010;
  68:	5a e1       	ldi	r21, 0x1A	; 26
if(x==0b00001010)
PORTB=0b00011000;
if(x==0b00000010)
PORTB=0b00010010;
if(x==0b00000100)
PORTB=0b00010000;
  6a:	40 e1       	ldi	r20, 0x10	; 16
{
x=PINC&0b00001111;
if(x==0b00001010)
PORTB=0b00011000;
if(x==0b00000010)
PORTB=0b00010010;
  6c:	32 e1       	ldi	r19, 0x12	; 18
if(x==0b00000100)
PORTB=0b00010000;
if(x==0b00000110)
PORTB=0b00011010;
if(x==0b00001000)
PORTB=0b00001100;
  6e:	2c e0       	ldi	r18, 0x0C	; 12
int x;
DDRB=0b00011110;
DDRC=0b11110000;
while(1)
{
x=PINC&0b00001111;
  70:	83 b3       	in	r24, 0x13	; 19
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	8f 70       	andi	r24, 0x0F	; 15
  76:	90 70       	andi	r25, 0x00	; 0
if(x==0b00001010)
  78:	8a 30       	cpi	r24, 0x0A	; 10
  7a:	91 05       	cpc	r25, r1
  7c:	11 f4       	brne	.+4      	; 0x82 <main+0x24>
PORTB=0b00011000;
  7e:	68 bb       	out	0x18, r22	; 24
  80:	0f c0       	rjmp	.+30     	; 0xa0 <main+0x42>
if(x==0b00000010)
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	91 05       	cpc	r25, r1
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x2e>
PORTB=0b00010010;
  88:	38 bb       	out	0x18, r19	; 24
  8a:	f2 cf       	rjmp	.-28     	; 0x70 <main+0x12>
if(x==0b00000100)
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	91 05       	cpc	r25, r1
  90:	11 f4       	brne	.+4      	; 0x96 <main+0x38>
PORTB=0b00010000;
  92:	48 bb       	out	0x18, r20	; 24
  94:	ed cf       	rjmp	.-38     	; 0x70 <main+0x12>
if(x==0b00000110)
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	91 05       	cpc	r25, r1
  9a:	11 f4       	brne	.+4      	; 0xa0 <main+0x42>
PORTB=0b00011010;
  9c:	58 bb       	out	0x18, r21	; 24
  9e:	e8 cf       	rjmp	.-48     	; 0x70 <main+0x12>
if(x==0b00001000)
  a0:	08 97       	sbiw	r24, 0x08	; 8
  a2:	31 f7       	brne	.-52     	; 0x70 <main+0x12>
PORTB=0b00001100;
  a4:	28 bb       	out	0x18, r18	; 24
  a6:	e4 cf       	rjmp	.-56     	; 0x70 <main+0x12>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
